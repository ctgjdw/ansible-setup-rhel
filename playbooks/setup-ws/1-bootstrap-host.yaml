- name: Scan server and add its public key to known_hosts
  hosts: all
  gather_facts: false

  tasks:
    - name: Create ssh folder
      file:
        path: ~/.ssh
        state: directory
      delegate_to: localhost

    - name: Scan server for its public key and add key to known_hosts
      shell: |
        PUB_KEY=$(ssh-keyscan -H {{ inventory_hostname }})
        echo $PUB_KEY > ~/.ssh/known_hosts
      delegate_to: localhost

- name: Setup yum repo
  hosts: all
  tasks:
    - name: Transfer repository files
      copy:
        src: "{{ base_dir }}/data/yum_repos/"
        dest: /home/{{ ansible_user }}/yum_repos/
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Setup yum repository config
      template:
        src: "{{ base_dir }}/configs/local.repo.j2"
        dest: /etc/yum.repos.d/local.repo
        owner: root
        group: root
      become: true

    - name: Yum update
      yum:
        name: "*"
        state: latest
        update_only: true
      become: true

- name: Configure host os
  hosts: all
  tasks:
    - name: Toggle soft limit for processes
      replace:
        path: /etc/security/limits.conf
        regexp: ^#\*\s+soft\s+core\s+0
        replace: "*                soft    nproc           unlimited"
      become: true

    - name: Configure bash shell
      blockinfile:
        path: "~/.bashrc"
        block: |
          export HISTFILE=~/.history
          export HISTFILESIZE=10000
          export HISTSIZE=500
          export HISTCONTROL=erasedups:ignoredups:ignorespace
          shopt -s histappend

          # Press h to view the bash history.
          alias h='history'

          # Move to the parent folder.
          alias ..='cd ..;pwd'

          # Move up two parent folders.
          alias ...='cd ../..;pwd'

          # Move up three parent folders.
          alias ....='cd ../../..;pwd'

          # function hg [grep_pattern]
          function hg() {
              history | grep "$1";
          }

          # Check the window size after each command and, if necessary, update the values of LINES and COLUMNS
          shopt -s checkwinsize

          # To have colors for ls and all grep commands such as grep, egrep and zgrep
          export CLICOLOR=1
          export LS_COLORS='no=00:fi=00:di=00;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:*.xml=00;31:'
          #export GREP_OPTIONS='--color=auto' #deprecated
          alias grep="/usr/bin/grep $GREP_OPTIONS"
          unset GREP_OPTIONS

          # Color for manpages in less makes manpages a little easier to read
          export LESS_TERMCAP_mb=$'\E[01;31m'
          export LESS_TERMCAP_md=$'\E[01;31m'
          export LESS_TERMCAP_me=$'\E[0m'
          export LESS_TERMCAP_se=$'\E[0m'
          export LESS_TERMCAP_so=$'\E[01;44;33m'
          export LESS_TERMCAP_ue=$'\E[0m'
          export LESS_TERMCAP_us=$'\E[01;32m'

          clear
          printf "\n"
          printf "   %s\n" "USER: $(echo $USER)"
          printf "   %s\n" "DATE: $(date)"
          printf "   %s\n" "UPTIME: $(uptime -p)"
          printf "   %s\n" "HOSTNAME: $(hostname -f)"
          printf "   %s\n" "KERNEL: $(uname -rms)"
          printf "   %s\n" "MEMORY: $(free -m -h | awk '/Mem/{print $3"/"$2}')"
          printf "\n"

          #######################################################
          # Set the ultimate amazing command prompt
          #######################################################

          function __setprompt
          {
            local LAST_COMMAND=$? # Must come first!

            # Define colors
            local LIGHTGRAY="\033[0;37m"
            local WHITE="\033[1;37m"
            local BLACK="\033[0;30m"
            local DARKGRAY="\033[1;30m"
            local RED="\033[0;31m"
            local LIGHTRED="\033[1;31m"
            local GREEN="\033[0;32m"
            local LIGHTGREEN="\033[1;32m"
            local BROWN="\033[0;33m"
            local YELLOW="\033[1;33m"
            local BLUE="\033[0;34m"
            local LIGHTBLUE="\033[1;34m"
            local MAGENTA="\033[0;35m"
            local LIGHTMAGENTA="\033[1;35m"
            local CYAN="\033[0;36m"
            local LIGHTCYAN="\033[1;36m"
            local NOCOLOR="\033[0m"

            # Show error exit code if there is one
            if [[ $LAST_COMMAND != 0 ]]; then
              # PS1="\[${RED}\](\[${LIGHTRED}\]ERROR\[${RED}\])-(\[${LIGHTRED}\]Exit Code \[${WHITE}\]${LAST_COMMAND}\[${RED}\])-(\[${LIGHTRED}\]"
              PS1="\[${DARKGRAY}\](\[${LIGHTRED}\]ERROR\[${DARKGRAY}\])-(\[${RED}\]Exit Code \[${LIGHTRED}\]${LAST_COMMAND}\[${DARKGRAY}\])-(\[${RED}\]"
              if [[ $LAST_COMMAND == 1 ]]; then
                PS1+="General error"
              elif [ $LAST_COMMAND == 2 ]; then
                PS1+="Missing keyword, command, or permission problem"
              elif [ $LAST_COMMAND == 126 ]; then
                PS1+="Permission problem or command is not an executable"
              elif [ $LAST_COMMAND == 127 ]; then
                PS1+="Command not found"
              elif [ $LAST_COMMAND == 128 ]; then
                PS1+="Invalid argument to exit"
              elif [ $LAST_COMMAND == 129 ]; then
                PS1+="Fatal error signal 1"
              elif [ $LAST_COMMAND == 130 ]; then
                PS1+="Script terminated by Control-C"
              elif [ $LAST_COMMAND == 131 ]; then
                PS1+="Fatal error signal 3"
              elif [ $LAST_COMMAND == 132 ]; then
                PS1+="Fatal error signal 4"
              elif [ $LAST_COMMAND == 133 ]; then
                PS1+="Fatal error signal 5"
              elif [ $LAST_COMMAND == 134 ]; then
                PS1+="Fatal error signal 6"
              elif [ $LAST_COMMAND == 135 ]; then
                PS1+="Fatal error signal 7"
              elif [ $LAST_COMMAND == 136 ]; then
                PS1+="Fatal error signal 8"
              elif [ $LAST_COMMAND == 137 ]; then
                PS1+="Fatal error signal 9"
              elif [ $LAST_COMMAND -gt 255 ]; then
                PS1+="Exit status out of range"
              else
                PS1+="Unknown error code"
              fi
              PS1+="\[${DARKGRAY}\])\[${NOCOLOR}\]\n"
            else
              PS1=""
            fi

            # Date
            PS1+="\[${DARKGRAY}\](\[${CYAN}\]\$(date +%a) $(date +%b-'%-m')" # Date
            PS1+="${BLUE} $(date +'%-I':%M:%S%P)\[${DARKGRAY}\])-" # Time

            # User and server
            local SSH_IP=`echo $SSH_CLIENT | awk '{ print $1 }'`
            local SSH2_IP=`echo $SSH2_CLIENT | awk '{ print $1 }'`
            if [ $SSH2_IP ] || [ $SSH_IP ] ; then
              PS1+="(\[${RED}\]\u@\h"
            else
              PS1+="(\[${RED}\]\u"
            fi

            # Current directory
            PS1+="\[${DARKGRAY}\]:\[${BROWN}\]\w\[${DARKGRAY}\])-"

            if [[ $EUID -ne 0 ]]; then
              PS1+="\[${GREEN}\]>\[${NOCOLOR}\] " # Normal user
            else
              PS1+="\[${RED}\]>\[${NOCOLOR}\] " # Root user
            fi

            # PS2 is used to continue a command using the \ character
            PS2="\[${DARKGRAY}\]>\[${NOCOLOR}\] "

            # PS3 is used to enter a number choice in a script
            PS3='Please enter a number from above list: '

            # PS4 is used for tracing a script in debug mode
            PS4='\[${DARKGRAY}\]+\[${NOCOLOR}\] '
          }
          PROMPT_COMMAND='__setprompt'
